*** TODOS OS ARQUIVOS QUE PRECISAREM SER INSERIDOS ESTÃO NO DIRETÓRIO DO CURSO ***

- Criar repositório no Github
    https://github.com/<usuario>
- Clonar o repositório para a máquina local
    git clone <url_repositorio>
- Criar o ambiente virtual
    Pyenv ou Virtualenv
- Instalar Django
    pip install django
- Criar o projeto
    django-admin startproject ecommerce .
- Criar a app
    django-admin startapp core
- Em ecommerce/settings.py:
  - Alterar:
      LANGUAGE_CODE = 'pt-br'
      TIME_ZONE = 'America/Sao_Paulo'
  - Informar a app core em INSTALLED_APPS:
        'core',
- Em core/views.py:
  - Criar a primeira view:
      def index(request):
          return HttpResponse("Hello World")
- Em ecommerce/urls.py:
  - Criar a rota:
      path('', index, name='index'),
- Em core/:
  - Criar a pasta templates:
      - Dentro dessa pasta colar o arquivo index.html
- Em core/views.py:
  - Mudamos a view indes:
      def index(request):
          return render(request, 'index.html')

- Em core/:
  - Criar a pasta static e colar a pasta assets para dentro

- Em core/templates/index.html:
  - Informar que será usado a biblioteca static:
      <!DOCTYPE html>
      {% load static %}
      <html lang="pt-br">

  - Crie um arquivo base.html e copie todo o conteúdo de index.html:
      - Altere <title> para:
          <title>{% block title %}Django E-Commerce{% endblock %}</title>

      - Recorte essa parte do código:
          <div class="jumbotron page-header">
              <h1>Django E-Commerce</h1>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
              <p><a class="btn btn-primary">Saiba mais</a></p>
          </div>

      - Coloque o block no lugar:
          <div class="container">
              {% block container %}{% endblock %}
          <footer>

      - E cole em core/templates/index.html com a especificação na primeira linha:
          {% extends base.html %}

          {% block container %}
              <div class="jumbotron page-header">
                  <h1>Django E-Commerce</h1>
                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
                  <p><a class="btn btn-primary">Saiba mais</a></p>
              </div>
          {% endblock %}

          Tudo que estiver dentro desse block container será mostrado dentro de base.html no local que especificamos {% block container %}{% endblock %}

          O block title não é necessário para index já que será o mesmo nome.

Vamos criar mais templates que extenderão de base.html:
  contact.html
  product.html
  product_list.html

Vamos incluir parte dos códigos HTML que estão nos arquivos disponibilizados no diretório.

- Em core/templates/contact.html:
    {% extends "base.html" %}

    {% block title %}
      Contato | {{ block.super }}
    {% endblock %}

    {% block container %}
      <div class="page-header">...</div>
    {% endblock %}

- Em core/templates/product_list.html:
    {% extends "base.html" %}

    {% block title %}
      Listagem de Produtos | {{ block.super }}
    {% endblock %}

    {% block container %}
      <div class="page-header">...</div>
      <div class="row">...</div>
    {% endblock %}

- Em core/templates/product.html:
    {% extends "base.html" %}

    {% block title %}
      Produto | {{ block.super }}
    {% endblock %}

    {% block container %}
      <div class="page-header">...</div>
      <div class="row">...</div>
    {% endblock %}

Agora vamos para as views:
- Em core/views.py, definimos mais três views:
    def contact(request):
        return render(request, 'contact.html')


    def product_list(request):
        return render(request, 'product_list.html')


    def product(request):
        return render(request, 'product.html')

- Em ecommerce/urls.py:
    path('contato/', contact, name='contact'),
    path('produtos/', product_list, name='product_list'),
    path('produto/', product, name='product'),

    path(<url>, <view>, <nome>)
    O nome serve para chamarmos as views dentro de base.html.

- Em core/templates/base.html:
    <a href="{% url 'index' %}">Início</a>
    <a class="dropdown-toggle" data-toggle="dropdown" href="{% url 'product_list' %}"...
    <li><a href="{% url 'product_list' %}">Notebooks</a></li>
    <li><a href="{% url 'product_list' %}">Acessórios</a></li>
    <li><a href="{% url 'product_list' %}">Celulares</a></li>
    <a href="{% url 'contact' %}">Contato</a>


***** PRÓXIMO VÍDEO 11 *****

Vídeo 20
========

CONTEXT_PROCESSORS

Como o menu tem que mostrar as categorias em todas as páginas, usamos context_processors.
Se colocarmos apenas em index.html, os itens do menu Categorias será mostrado porém ao acessarmos outra página não.
No settings.py, em TEMPLATES, estão especificados e podemos colocar os nossos.
Criamos um arquivo context_processors.py na app catalog.
- Em django-e-commerce/catalog/context_processors.py:
    from catalog.models import Category


    def categories(request):
        return {
            'categories': Category.objects.all()
        }

- Em ecommerce/settings.py:
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    # apps
                    'catalog.context_processors.categories',
                ],
            },
        },
    ]



Para testes, instalar o mommy para preenchimento de dados
  pip install model_mommy

Para renderizar componentes com atributos/classes no template:
  pip install django-widget-tweaks


MIGRATE NO HEROKU
=================
  heroku run python manage.py migrate


CLASS BASED VIEWS
=================
http://ccbv.co.uk/


- Em catalog/views.py:
    class ProductListView(generic.ListView):
        model = Product
        template_name = 'catalog/product_list.html'
        context_object_name = 'products'

    product_list = ProductListView.as_view()

    model: indica qual o modelo. Já faz a lógica Product.objects.all()
    template_name: nome do template
    context_object_name: nome da variável de contexto para o template (opcional)


    class CategoryListView(generic.ListView):
      template_name = 'catalog/category.html'
      context_object_name = 'product_list'

      def get_queryset(self):
          return Product.objects.filter(category__slug=self.kwargs['slug'])

          get_queryset: ListView possui esse método e sobrescrevemos-o. É a mesma coisa em ambos os casos:
            model = Category
            OU
            queryset = Category.objects.all()

            Nesse método podemos acessar:
              self.request
              self.kwargs
              self.args

              Ao invés da forma implantada, podemos fazer também:
                  def get_queryset(self):
                    category = get_object_or_404(Category, slug=self.kwargs['slug']
                    return Product.objects.filter(category=category)

            category__slug: acessando o slug através do lookup, como __icontains por exemplo.

      def get_context_data(self, **kwargs):
          context = super(CategoryListView, self).get_context_data(**kwargs)
          context['current_category'] = get_object_or_404(Category, slug=self.kwargs['slug'])
          return context

          get_context_data: método que sobrescrevemos para incluir a variável current_category para o template.
          get_object_or_404: Se a categoria não existir, retorna 404 (Página não encontrada)

    category = CategoryListView.as_view()


PAGINATION
==========
Quando se coloca "paginate_by" em uma ListView, ganha-se no template dois objetos:
  paginator: objeto do Paginator
  page_obj: número da página atual



from django.urls import reverse_lazy
O reverse_lazy só pega a url quando ele realmente quiser o valor

***** PRÓXIMO VÍDEO 34 *****

